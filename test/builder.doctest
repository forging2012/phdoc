    >>> import os.path as p
    >>> from phdoc.builder import Builder, get_title
    >>> b = Builder(CONFIG)

Filesystem Interaction
======================

You can generate breadcrumbs for a document, based on its absolute path (which will be relativized to the wiki root):

    >>> b.crumbs(p.join(WIKI_ROOT, 'wiki', 'index.md'))
    [('index', None)]
    
    >>> b.crumbs(p.join(WIKI_ROOT, 'wiki', 'somefile.md'))
    [('index', '/'), ('somefile', None)]
    
    >>> b.crumbs(p.join(WIKI_ROOT, 'wiki', 'somedir', 'index.md'))
    [('index', '/'), ('somedir', None)]
    
    >>> b.crumbs(p.join(WIKI_ROOT, 'wiki', 'somedir', 'something.md'))
    [('index', '/'), ('somedir', '/somedir/'), ('something', None)]

You can also just use relative paths (relative to `WIKI_ROOT/wiki`):

    >>> b.crumbs('index.md')
    [('index', None)]
    
    >>> b.crumbs('somefile.md')
    [('index', '/'), ('somefile', None)]
    
    >>> b.crumbs(p.join('somedir', 'index.md'))
    [('index', '/'), ('somedir', None)]
    
    >>> b.crumbs(p.join('somedir', 'something.md'))
    [('index', '/'), ('somedir', '/somedir/'), ('something', None)]

You can also walk through all files in the wiki, using the `walk()` method:

    >>> import os
    >>> for filepath in b.walk():
    ...     print filepath
    an_empty_file.md
    file1.md
    file2.md
    file3.md
    file4.md
    file5.md
    file6.md
    subdir/hello.md

Rendering
=========

You can render documents with the `Builder.render()` method:

    >>> b.render('file1.md')
    u'<h1>Hello</h1>'
    >>> b.render('file2.md')
    u'<h1>World</h1>'
    >>> b.render('file3.md')
    u'<h1>Foo</h1>'

Titles
------

The `get_title()` function deals with retrieving titles from files. Initially, the file content itself is used to try to get a title. Either text in a specially formatted HTML comment, like this:

    >>> get_title(None, '<!-- title: Some Title -->')
    'Some Title'

Or the first `<h1>` element:

    >>> get_title(None, '<h1>Some Title</h1>')
    'Some Title'

If those both fail, the filename is used to produce a title:

    >>> get_title('some_title.arbitraryextension', '')
    'Some Title'

Since this is linked to the documents themselves, you can use the `title()` method on the builder instance to get the title for a given document:

    >>> b.title('file1.md')
    u'Hello'
    >>> b.title('file2.md')
    u'World'
    >>> b.title('file3.md')
    u'Foo'
    >>> b.title('an_empty_file.md')
    'An Empty File'

Documents
---------

You can render whole documents using `Builder.render_document()`:

    >>> print b.render_document('file1.md')
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    <head>
      <title>Hello</title>
      <link rel="stylesheet" type="text/css" href="/example.css" />
    </head>
    <body>
      <h1>Hello</h1>
    </body>
    </html>
    
    >>> print b.render_document('file2.md')
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    <head>
      <title>World</title>
      <link rel="stylesheet" type="text/css" href="/example.css" />
    </head>
    <body>
      <h1>World</h1>
    </body>
    </html>

This uses the `document.html` Jinja2 template, by default located in `WIKI_ROOT/.templates/`, to produce the documents.
