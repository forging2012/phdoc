To generate listings, we first need to build the wiki.

    >>> from phdoc.cli.main import main
    >>> try:
    ...     main(['-c', WIKI_ROOT, '--quiet', 'build'])
    ... except SystemExit, exc:
    ...     assert exc.code != 0, "An error occurred building the wiki"

The wiki should now be built in the HTML root:

    >>> import os
    >>> import os.path as p
    >>> print '\n'.join(os.listdir(CONFIG.html_dir))
    _list.html
    an_empty_file.html
    example.css
    file1.html
    file2.html
    file3.html
    index.html
    subdir

Now we can try getting some listings. The bulk of the process occurs in the `Builder.listing_context()` method, which builds a template context dictionary for rendering the Jinja2 `listing.html` template. First we have to get a `Builder` instance:

    >>> from phdoc.builder import Builder
    >>> b = Builder(CONFIG)

Now we can get the listing for the HTML root itself, just by passing the empty string:

    >>> import pprint
    >>> pprint.pprint(b.listing_context('')) # doctest: +ELLIPSIS
    {'directory': '',
     'files': [{'basename': 'example.css',
                'href': '/example.css',
                'humansize': '27B',
                'size': 27,
                'slug': 'example'}],
     'make_relative': <function <lambda> at 0x...>,
     'pages': [{'basename': 'an_empty_file.html',
                'href': '/an_empty_file',
                'humansize': '248B',
                'size': 248,
                'slug': 'an_empty_file',
                'title': 'An Empty File'},
               {'basename': 'file3.html',
                'href': '/file3',
                'humansize': '250B',
                'size': 250,
                'slug': 'file3',
                'title': u'Foo'},
               {'basename': 'file1.html',
                'href': '/file1',
                'humansize': '254B',
                'size': 254,
                'slug': 'file1',
                'title': u'Hello'},
               {'basename': 'file2.html',
                'href': '/file2',
                'humansize': '254B',
                'size': 254,
                'slug': 'file2',
                'title': u'World'}],
     'sub_directories': [{'basename': 'subdir', 'href': '/subdir/'}]}

We can also get the listings for subdirectories, by passing in their paths, relative to the HTML root:

    >>> pprint.pprint(b.listing_context('/subdir')) # doctest: +ELLIPSIS
    {'directory': 'subdir',
     'files': [],
     'make_relative': <function <lambda> at 0x...>,
     'pages': [{'basename': 'hello.html',
                'href': '/subdir/hello',
                'humansize': '268B',
                'size': 268,
                'slug': 'hello',
                'title': u'Hello again.'}],
     'sub_directories': []}

Note that these paths are always '/'-delimited, since they are taken to be URL paths and not filesystem paths.
